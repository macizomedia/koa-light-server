const Koa = require('koa');
const KeyGrip = require('keygrip');
const cors = require('@koa/cors');
const json = require('koa-json');
const bodyparser = require('koa-bodyparser');
const morgan = require('koa-morgan');
const compression = require('koa-compress');
const helmet = require('koa-helmet');
const KoaRouter = require('koa-router');
const i18n = require('i18n');
const passport = require('koa-passport');
const mount = require('koa-mount');
const graphqlHTTP = require('koa-graphql');
const schema = require('./graphql/schema');
const initDB = require('./config/database');
const errorHandler = require('./middleware/errorHandler');

initDB();

const app = new Koa();
const router = KoaRouter();

app.keys = new KeyGrip(['a complicated secret', 'i like onions'], 'sha256');

// logger
app.use(async (ctx, next) => {
	await next();
	const rt = ctx.response.get('X-Response-Time');
	console.log(`${ctx.method} ${ctx.url} - ${rt}`);
});

// Enable only in development HTTP request logger middleware
if (process.env.NODE_ENV === 'development') {
	app.use(morgan('dev'));
}

app.use(json());
app.use(bodyparser());
app.use(cors());
app.use(compression());
app.use(helmet());
app.use(passport.initialize());
app.use(errorHandler);

/**
 * CORS middleware
 *
 * @param {Object} [options]
 *  - {String|Function(ctx)} origin `Access-Control-Allow-Origin`, default is request Origin header
 *  - {String|Array} allowMethods `Access-Control-Allow-Methods`, default is 'GET,HEAD,PUT,POST,DELETE,PATCH'
 *  - {String|Array} exposeHeaders `Access-Control-Expose-Headers`
 *  - {String|Array} allowHeaders `Access-Control-Allow-Headers`
 *  - {String|Number} maxAge `Access-Control-Max-Age` in seconds
 *  - {Boolean|Function(ctx)} credentials `Access-Control-Allow-Credentials`, default is false.
 *  - {Boolean} keepHeadersOnError Add set headers to `err.header` if an error is thrown
 * @return {Function} cors middleware
 * @api public
 */
// x-response-time

app.use(async (ctx, next) => {
	const start = Date.now();
	await next();
	const ms = Date.now() - start;
	ctx.set('X-Response-Time', `${ms}ms`);
});

// i18n
i18n.configure({
	locales: ['en', 'es'],
	directory: `${__dirname}/locales`,
	defaultLocale: 'en',
	objectNotation: true
});
app.use(i18n.init);

// response

app.use(async ctx => {
	ctx.cookies.set('name', 'tobi', {
		signed: true
	});
	ctx.body = {
		title: 'reeset server'
	};
});


app.use(mount('/graphql', graphqlHTTP({
	schema,
	graphiql: true
})));

const authRoute = require('./routes/v1/auth');

router.get('/home', ctx => (ctx.body = 'HOME'));

router.get('/auth', authRoute);

app.use(router.routes()).use(router.allowedMethods());

app.listen(3000, () => console.log('server started 3000'));